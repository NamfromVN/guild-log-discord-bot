import disnake
import asyncio
from disnake import OptionType, Option
from disnake.ext import commands
import sqlite3
from utils.ClientUser import ClientUser

class voice(commands.Cog):
    def __init__(self, bot):
        self.bot: ClientUser = bot
        self.is_hide: bool = False

    @commands.Cog.listener("on_voice_state_update")
    async def voicechatfuncion(self, member, before, after):
        vc_embed = disnake.Embed(title="Xin ch√†o", description="",color=0x7289da)
        vc_embed.add_field(name=f'**C√°c l·ªánh c·ªßa bot**', value=f'**Kh√≥a k√™nh c·ªßa b·∫°n b·∫±ng c√°ch s·ª≠ d·ª•ng l·ªánh sau:**\n\n`.voice lock`\n\n ----------\n'
                         f'**M·ªü kh√≥a k√™nh c·ªßa b·∫°n b·∫±ng l·ªánh sau:**\n\n`.voice lock`\n\n ----------\n\n'
                         f'**Thay ƒë·ªïi t√™n k√™nh c·ªßa b·∫°n b·∫±ng l·ªánh sau:**\n\n`.voice name <t√™n>`\n- -----------\n'
                         f'**Thay ƒë·ªïi gi·ªõi h·∫°n k√™nh c·ªßa b·∫°n b·∫±ng c√°ch s·ª≠ d·ª•ng l·ªánh sau:**\n\n` .voice limit <s·ªë>`\n---- --------\n'
                         f'**Cho ph√©p ng∆∞·ªùi d√πng tham gia b·∫±ng c√°ch s·ª≠ d·ª•ng l·ªánh sau:**\n\n`.voice permit @ai ƒë√≥`\n-----------\n'
                         f'**X√°c nh·∫≠n quy·ªÅn s·ªü h·ªØu k√™nh sau khi ch·ªß s·ªü h·ªØu r·ªùi ƒëi:**\n`.voice claim`\n------ ------\n'
                         f'**X√≥a quy·ªÅn v√† ng∆∞·ªùi d√πng kh·ªèi k√™nh c·ªßa b·∫°n b·∫±ng l·ªánh sau:**\n`.voice reject @ai ƒë√≥`\n', inline='false')
        conn = sqlite3.connect('voice.db')
        c = conn.cursor()
        guildID = member.guild.id
        c.execute("SELECT voiceChannelID FROM guild WHERE guildID = ?", (guildID,))
        voice=c.fetchone()
        if voice is None:
            pass
        else:
            voiceID = voice[0]
            try:
                if after.channel.id == voiceID:
                    c.execute("SELECT * FROM voiceChannel WHERE userID = ?", (member.id,))
                    cooldown=c.fetchone()
                    if cooldown != None:
                        await member.send("B·∫°n t·∫°o k√™nh qu√° nhanh!")
                        await asyncio.sleep(3)
                        return
                        
                    c.execute("SELECT voiceCategoryID FROM guild WHERE guildID = ?", (guildID,))
                    voice=c.fetchone()
                    c.execute("SELECT channelName, channelLimit FROM userSettings WHERE userID = ?", (member.id,))
                    setting=c.fetchone()
                    c.execute("SELECT channelLimit FROM guildSettings WHERE guildID = ?", (guildID,))
                    guildSetting=c.fetchone()
                    if setting is None:
                        name = f"K√™nh c·ªßa {member.name}"
                        if guildSetting is None:
                            limit = 0
                        else:
                            limit = guildSetting[0]
                    else:
                        if guildSetting is None:
                            name = setting[0]
                            limit = setting[1]
                        elif guildSetting is not None and setting[1] == 0:
                            name = setting[0]
                            limit = guildSetting[0]
                        else:
                            name = setting[0]
                            limit = setting[1]
                    categoryID = voice[0]
                    id = member.id
                    category = self.bot.get_channel(categoryID)
                    channel2 = await member.guild.create_voice_channel(name,category=category)
                    channelID = channel2.id
                    await member.move_to(channel2)
                    await channel2.set_permissions(self.bot.user, connect=True,read_messages=True)
                    await channel2.set_permissions(member, connect=True,read_messages=True)
                    await channel2.send(embed=vc_embed)
                    await channel2.edit(name= name, user_limit = limit)
                    c.execute("INSERT INTO voiceChannel VALUES (?, ?)", (id,channelID))
                    conn.commit()
                    def check(a,b,c):
                        return len(channel2.members) == 0
                    await self.bot.wait_for('voice_state_update', check=check)
                    await channel2.delete()
                    await asyncio.sleep(3)
                    c.execute('DELETE FROM voiceChannel WHERE userID=?', (id,))
            except:
                pass
        conn.commit()
        conn.close()

    @commands.slash_command()
    async def help(self, ctx: disnake.ApplicationCommandInteraction):
        vc_embed = disnake.Embed(title="Xin ch√†o", description="",color=0x7289da)
        vc_embed.set_author(name=f"{ctx.guild.me.display_name}",url="https://discordbots.org/bot/472911936951156740", icon_url=f"{ctx.guild.me.display_avatar.url}")
        vc_embed.add_field(name=f'**C√°c l·ªánh c·ªßa bot**', value=f'**Kh√≥a k√™nh c·ªßa b·∫°n b·∫±ng c√°ch s·ª≠ d·ª•ng l·ªánh sau:**\n\n`.voice lock`\n\n ----------\n'
                         f'**M·ªü kh√≥a k√™nh c·ªßa b·∫°n b·∫±ng l·ªánh sau:**\n\n`.voice lock`\n\n ----------\n\n'
                         f'**Thay ƒë·ªïi t√™n k√™nh c·ªßa b·∫°n b·∫±ng l·ªánh sau:**\n\n`.voice name <t√™n>`\n- -----------\n'
                         f'**Thay ƒë·ªïi gi·ªõi h·∫°n k√™nh c·ªßa b·∫°n b·∫±ng c√°ch s·ª≠ d·ª•ng l·ªánh sau:**\n\n` .voice limit <s·ªë>`\n---- --------\n'
                         f'**Cho ph√©p ng∆∞·ªùi d√πng tham gia b·∫±ng c√°ch s·ª≠ d·ª•ng l·ªánh sau:**\n\n`.voice permit @person`\n-----------\n'
                         f'**X√°c nh·∫≠n quy·ªÅn s·ªü h·ªØu k√™nh sau khi ch·ªß s·ªü h·ªØu r·ªùi ƒëi:**\n`.voice claim`\n------ ------\n'
                         f'**X√≥a quy·ªÅn v√† ng∆∞·ªùi d√πng kh·ªèi k√™nh c·ªßa b·∫°n b·∫±ng l·ªánh sau:**\n`.voice reject @person`\n', inline='false')
        await ctx.response.send_message(embed=vc_embed)

    @commands.slash_command(name="default_setup", description="T·∫°o k√™nh join to create theo c√†i ƒë·∫∑t m·∫∑c ƒë·ªãnh")
    async def vc(self, ctx: disnake.ApplicationCommandInteraction):
                await ctx.response.defer(ephemeral=True)
                conn = sqlite3.connect('voice.db')
                c = conn.cursor()
                guildID = ctx.guild.id
                id = ctx.author.id
                new_cat = await ctx.guild.create_category_channel("K√™nh Tho·∫°i")
                channel = await ctx.guild.create_voice_channel(name="Tham gia ƒë·ªÉ t·∫°o k√™nh üîä", category=new_cat)
                c.execute("SELECT * FROM guild WHERE guildID = ? AND ownerID=?", (guildID, id))
                voice=c.fetchone()
                if voice is None:
                    c.execute ("INSERT INTO guild VALUES (?, ?, ?, ?)",(guildID,id,channel.id,new_cat.id))
                    await ctx.edit_original_response("ƒê√£ thi·∫øt ƒë·∫∑t th√†nh c√¥ng")
                else:
                    c.execute ("UPDATE guild SET guildID = ?, ownerID = ?, voiceChannelID = ?, voiceCategoryID = ? WHERE guildID = ?",(guildID,id,channel.id,new_cat.id, guildID))
                    await ctx.edit_original_response("ƒê√£ thi·∫øt ƒë·∫∑t th√†nh c√¥ng")
                conn.commit()
                conn.close()

    @commands.slash_command(description="Kh√≥a k√™nh c·ªßa b·∫°n ƒë·ªÉ kh√¥ng ai kh√°c ngo√†i b·∫°n c√≥ th·ªÉ k·∫øt n·ªëi v√†o")
    async def lock(self, ctx: disnake.ApplicationCommandInteraction):
        await ctx.response.defer()
        user_channel = ctx.author.voice.channel
        if user_channel == None:
            await ctx.edit_original_response(f"{ctx.author.mention} B·∫°n kh√¥ng ·ªü trong m·ªôt k√™nh gi·ªçng n√≥i n√†o c·∫£." )
        conn = sqlite3.connect('voice.db')
        c = conn.cursor()
        id = ctx.author.id
        c.execute("SELECT voiceID FROM voiceChannel WHERE userID = ?", (id,))
        voice=c.fetchone()
        if voice is None:
            await ctx.edit_original_response(f"{ctx.author.mention} B·∫°n kh√¥ng s·ªü h·ªØu k√™nh." )
        else:
            channelID = voice[0]
            role = ctx.guild.default_role
            channel = self.bot.get_channel(channelID)
            await channel.set_permissions(role, connect=False)
            await ctx.edit_original_response(f'{ctx.author.mention} k√™nh ƒë√£ ƒë∆∞·ª£c kh√≥a! üîí' )
        conn.commit()
        conn.close()
        
    @commands.slash_command(description="·∫®n k√™nh c·ªßa b·∫°n")
    async def hide(self, ctx: disnake.ApplicationCommandInteraction):
        await ctx.response.defer()
        user_channel = ctx.author.voice.channel
        if user_channel == None:
            await ctx.edit_original_response(f"{ctx.author.mention} B·∫°n kh√¥ng ·ªü trong m·ªôt k√™nh gi·ªçng n√≥i n√†o c·∫£." )
        conn = sqlite3.connect('voice.db')
        c = conn.cursor()
        id = ctx.author.id
        c.execute("SELECT voiceID FROM voiceChannel WHERE userID = ?", (id,))
        voice=c.fetchone()
        if voice is None:
            await ctx.edit_original_response(f"{ctx.author.mention} B·∫°n kh√¥ng s·ªü h·ªØu k√™nh." )
            return
        ovr = disnake.PermissionOverwrite()
        ovr.view_channel = False
        self.is_hide = True
        await ctx.channel.set_permissions(overwrite=ovr, target=ctx.guild.default_role)
        await ctx.edit_original_response(f"ƒê√£ ·∫©n k√™nh c·ªßa b·∫°n")
    
    @commands.slash_command(description="Hi·ªán k√™nh c·ªßa b·∫°n n·∫øu n√≥ ƒëang ·∫©n")
    async def unhide(self, ctx: disnake.ApplicationCommandInteraction):
        await ctx.response.defer()
        if not self.is_hide:
            await ctx.edit_original_response("K√™nh kh√¥ng b·ªã ·∫©n")
            return
        user_channel = ctx.author.voice.channel
        if user_channel == None:
            await ctx.edit_original_response(f"{ctx.author.mention} B·∫°n kh√¥ng ·ªü trong m·ªôt k√™nh gi·ªçng n√≥i n√†o c·∫£." )
        conn = sqlite3.connect('voice.db')
        c = conn.cursor()
        id = ctx.author.id
        c.execute("SELECT voiceID FROM voiceChannel WHERE userID = ?", (id,))
        voice=c.fetchone()
        if voice is None:
            await ctx.edit_original_response(f"{ctx.author.mention} B·∫°n kh√¥ng s·ªü h·ªØu k√™nh." )
            return
        ovr = disnake.PermissionOverwrite()
        ovr.view_channel = True
        self.is_hide = False
        await ctx.channel.set_permissions(overwrite=ovr, target=ctx.guild.default_role)
        await ctx.edit_original_response("ƒê√£ hi·ªán l·∫°i k√™nh cho b·∫°n")

    @commands.slash_command(description="M·ªü kh√≥a k√™nh c·ªßa b·∫°n")
    async def unlock(self, ctx: disnake.ApplicationCommandInteraction):
        await ctx.response.defer()
        user_channel = ctx.author.voice.channel
        if user_channel == None:
            await ctx.edit_original_response(f"{ctx.author.mention} B·∫°n kh√¥ng ·ªü trong m·ªôt k√™nh gi·ªçng n√≥i n√†o c·∫£." )
        conn = sqlite3.connect('voice.db')
        c = conn.cursor()
        id = ctx.author.id
        c.execute("SELECT voiceID FROM voiceChannel WHERE userID = ?", (id,))
        voice=c.fetchone()
        if voice is None:
            await ctx.edit_original_response(f"{ctx.author.mention} B·∫°n kh√¥ng s·ªü h·ªØu k√™nh." )
        else:
            channelID = voice[0]
            role = ctx.guild.default_role
            channel = self.bot.get_channel(channelID)
            await channel.set_permissions(role, connect=True)
            await ctx.edit_original_response(f'{ctx.author.mention} k√™nh ƒë√£ m·ªü kh√≥a üîì' )
        conn.commit()
        conn.close()
        
    @commands.slash_command(name="setbitrate", options=[Option("bitrate",
                                                               "Thay ƒë·ªïi bitrate cho k√™nh tho·∫°i c·ªßa b·∫°n",
                                                               OptionType.integer,
                                                               True, max_value=96)])
    async def setbirate(self, ctx: disnake.ApplicationCommandInteraction, bitrate: int):
        await ctx.response.defer()
        user_channel = ctx.author.voice.channel
        if user_channel == None:
            await ctx.edit_original_response(f"{ctx.author.mention} B·∫°n kh√¥ng ·ªü trong m·ªôt k√™nh gi·ªçng n√≥i n√†o c·∫£." )
        conn = sqlite3.connect('voice.db')
        c = conn.cursor()
        id = ctx.author.id
        c.execute("SELECT voiceID FROM voiceChannel WHERE userID = ?", (id,))
        voice=c.fetchone()
        if voice is None:
            await ctx.edit_original_response(f"{ctx.author.mention} B·∫°n kh√¥ng s·ªü h·ªØu k√™nh." )
        else:
            channelID = voice[0]
            channel = ctx.guild.get_channel(channelID)
            await channel.bitrate(bitrate)
            await ctx.edit_original_response(f"ƒê√£ thay ƒë·ªïi bitrate c·ªßa k√™nh th√†nh {bitrate}")
        conn.commit()
        conn.close()

    @commands.slash_command(description="Ph√™ duy·ªát ng∆∞·ªùi d√πng n√†o ƒë√≥ v√†o k√™nh", options=[Option("member", 
                                                                                                description="Ng∆∞·ªùi d√πng ƒë·ªÉ cho ph√©p",
                                                                                                type=OptionType.user,
                                                                                                required=True)])
    async def allow(self, ctx: disnake.ApplicationCommandInteraction, member : disnake.Member):
        await ctx.response.defer()
        user_channel = ctx.author.voice.channel
        if user_channel == None:
            await ctx.edit_original_response(f"{ctx.author.mention} B·∫°n kh√¥ng ·ªü trong m·ªôt k√™nh gi·ªçng n√≥i n√†o c·∫£." )
        conn = sqlite3.connect('voice.db')
        c = conn.cursor()
        id = ctx.author.id
        c.execute("SELECT voiceID FROM voiceChannel WHERE userID = ?", (id,))
        voice=c.fetchone()
        if voice is None:
            await ctx.edit_original_response(f"{ctx.author.mention} B·∫°n kh√¥ng s·ªü h·ªØu k√™nh n√†y.")
        else:
            channelID = voice[0]
            channel = self.bot.get_channel(channelID)
            await channel.set_permissions(member, connect=True)
            await ctx.edit_original_response(f'{ctx.author.mention} B·∫°n ƒë√£ cho ph√©p {member.name} truy c·∫≠p v√†o k√™nh. ‚úÖ' )
        conn.commit()
        conn.close()

    @commands.slash_command(description="T·ª´ ch·ªëi ng∆∞·ªùi d√πng n√†o ƒë√≥ v√†o k√™nh", options=[Option("member", 
                                                                                                description="Ng∆∞·ªùi d√πng ƒë·ªÉ cho ph√©p",
                                                                                                type=OptionType.user,
                                                                                                required=True)])
    async def reject(self, ctx: disnake.ApplicationCommandInteraction, member : disnake.Member):
        await ctx.response.defer()
        user_channel = ctx.author.voice.channel
        if user_channel == None:
            await ctx.edit_original_response(f"{ctx.author.mention} B·∫°n kh√¥ng ·ªü trong m·ªôt k√™nh gi·ªçng n√≥i n√†o c·∫£." )
        conn = sqlite3.connect('voice.db')
        c = conn.cursor()
        id = ctx.author.id
        guildID = ctx.guild.id
        c.execute("SELECT voiceID FROM voiceChannel WHERE userID = ?", (id,))
        voice=c.fetchone()
        if voice is None:
            await ctx.edit_original_response(f"{ctx.author.mention} B·∫°n kh√¥ng s·ªü h·ªØu k√™nh n√†y." )
        else:
            channelID = voice[0]
            channel = self.bot.get_channel(channelID)
            for members in channel.members:
                if members.id == member.id:
                    c.execute("SELECT voiceChannelID FROM guild WHERE guildID = ?", (guildID,))
                    voice=c.fetchone()
                    channel2 = self.bot.get_channel(voice[0])
                    await member.move_to(channel2)
            await channel.set_permissions(member, connect=False,read_messages=True)
            await ctx.edit_original_response(f'{ctx.author.mention} B·∫°n ƒë√£ t·ª´ ch·ªëi {member.name} truy c·∫≠p k√™nh. ‚ùå' )
        conn.commit()
        conn.close()



    @commands.slash_command(description="Gi·ªõi h·∫°n s·ªë ng∆∞·ªùi d√πng trong m·ªôt k√™nh", options=[Option("limit", 
                                                                                                description="Gi·ªõi h·∫°n c·ªßa k√™nh (ƒë·∫∑t l√† 0 c√≥ nghƒ©a l√† t·∫Øt gi·ªõi h·∫°n)",
                                                                                                type=OptionType.integer,
                                                                                                max_value=99,
                                                                                                required=True)])
    async def limit(self, ctx: disnake.ApplicationCommandInteraction, limit):
        await ctx.response.defer()
        user_channel = ctx.author.voice.channel
        if user_channel == None:
            await ctx.edit_original_response(f"{ctx.author.mention} B·∫°n kh√¥ng ·ªü trong m·ªôt k√™nh gi·ªçng n√≥i n√†o c·∫£." )
        conn = sqlite3.connect('voice.db')
        c = conn.cursor()
        id = ctx.author.id
        c.execute("SELECT voiceID FROM voiceChannel WHERE userID = ?", (id,))
        voice=c.fetchone()
        if voice is None:
            await ctx.edit_original_response(f"{ctx.author.mention} B·∫°n kh√¥ng s·ªü h·ªØu k√™nh n√†y." )
        else:
            channelID = voice[0]
            channel = self.bot.get_channel(channelID)
            await channel.edit(user_limit = limit)
            await ctx.edit_original_response(f'{ctx.author.mention} B·∫°n ƒë√£ ƒë·∫∑t gi·ªõi h·∫°n k√™nh l√† '+ '{}!'.format(limit) )
            c.execute("SELECT channelName FROM userSettings WHERE userID = ?", (id,))
            voice=c.fetchone()
            if voice is None:
                c.execute("INSERT INTO userSettings VALUES (?, ?, ?)", (id,f'{ctx.author.name}',limit))
            else:
                c.execute("UPDATE userSettings SET channelLimit = ? WHERE userID = ?", (limit, id))
        conn.commit()
        conn.close()


    @commands.slash_command(description="ƒê·ªïi t√™n k√™nh tho·∫°i c·ªßa b·∫°n", options=[Option("name",
                                                                                                description="T√™n m√† b·∫°n s·∫Ω ƒë·∫∑t cho k√™nh",
                                                                                                type=OptionType.string,
                                                                                                required=True)])
    async def name(self, ctx: disnake.ApplicationCommandInteraction,*, name):
        await ctx.response.defer()
        user_channel = ctx.author.voice.channel
        if user_channel == None:
            await ctx.edit_original_response(f"{ctx.author.mention} B·∫°n kh√¥ng ·ªü trong m·ªôt k√™nh gi·ªçng n√≥i n√†o c·∫£." )
        conn = sqlite3.connect('voice.db')
        c = conn.cursor()
        id = ctx.author.id
        c.execute("SELECT voiceID FROM voiceChannel WHERE userID = ?", (id,))
        voice=c.fetchone()
        if voice is None:
            await ctx.edit_original_response(f"{ctx.author.mention} B·∫°n kh√¥ng s·ªü h·ªØu k√™nh n√†y." )
        else:
            channelID = voice[0]
            channel = self.bot.get_channel(channelID)
            await channel.edit(name = name)
            await ctx.edit_original_response(f'{ctx.author.mention} B·∫°n ƒë√£ thay ƒë·ªïi t√™n k√™nh th√†nh '+ '{}!'.format(name) )
            c.execute("SELECT channelName FROM userSettings WHERE userID = ?", (id,))
            voice=c.fetchone()
            if voice is None:
                c.execute("INSERT INTO userSettings VALUES (?, ?, ?)", (id,name,0))
            else:
                c.execute("UPDATE userSettings SET channelName = ? WHERE userID = ?", (name, id))
        conn.commit()
        conn.close()

    @commands.slash_command(description="Bi·∫øn k√™nh tho·∫°i n√†y th√†nh c·ªßa b·∫°n")
    async def claim(self, ctx: disnake.ApplicationCommandInteraction):
        await ctx.response.defer()
        x = False
        conn = sqlite3.connect('voice.db')
        c = conn.cursor()
        user_channel = ctx.author.voice.channel
        if user_channel == None:
            await ctx.edit_original_response(f"{ctx.author.mention} B·∫°n kh√¥ng ·ªü trong m·ªôt k√™nh gi·ªçng n√≥i n√†o c·∫£." )
        else:
            id = ctx.author.id
            c.execute("SELECT userID FROM voiceChannel WHERE voiceID = ?", (user_channel.id,))
            voice=c.fetchone()
            if voice is None:
                await ctx.channel.send(f"{ctx.author.mention} B·∫°n kh√¥ng th·ªÉ s·ªü h·ªØu k√™nh ƒë√≥!" )
            else:
                for data in user_channel.members:
                    if data.id == voice[0]:
                        owner = ctx.guild.get_member(voice [0])
                        await ctx.edit_original_response(f"{ctx.author.mention} K√™nh n√†y ƒë√£ ƒë∆∞·ª£c s·ªü h·ªØu b·ªüi {owner.mention}!" )
                        x = True
                if x == False:
                    await ctx.edit_original_response(f"{ctx.author.mention} B√¢y gi·ªù b·∫°n l√† ch·ªß s·ªü h·ªØu c·ªßa k√™nh!" )
                    c.execute("UPDATE voiceChannel SET userID = ? WHERE voiceID = ?", (id, user_channel.id))
            conn.commit()
            conn.close()


def setup(bot: ClientUser):
    bot.add_cog(voice(bot))
